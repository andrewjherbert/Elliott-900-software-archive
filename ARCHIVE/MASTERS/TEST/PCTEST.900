
*17

(( PROCESS COUNTER TEST - ANDREW HERBERT - 15/09/2021 )

(
  Check 14 n instruction for 0 <= n <= 17 
  Shift pattern &000001 &000001 by 0, 1, 2, ..., 48 left.
  Report shift if A or Q wrong.
  N.B. 3 instructions saves Q18-2 in M17-1 so cannot check
  top bit of Q.
  )

[PCTEST]


PCTEST <
       4   +1          (Set up simulated AQ)
       5   A
       5   Q
       4   +0
       5   QCHK        (Expected value of Q after shift)
       5   QFLAG       (Indicate no overflow yet from Q to A)
       5   AERRS       (Zero error counts)
       5   QERRS
       4   =14 0       (Patch up shift order)
       5   SHIFT
       4   -49         (Count from 0 to 48)
       5   COUNT
       
CYCLE  0   +1          (Set up real AQ)  
       4   +1          
SHIFT  >1              (Patched with shift order)  
       3   QSAVE       (Preserve Q/2)
       2   A           (Check A)
       7   AOK
       10  AERRS

(Error detected)
BAD    4   -2560       (Punch 10 blanks)
       15  6144
       1   +256
       7   ;+2
       8   ;-3
       4   COUNT       (Punch shift count in binary)
       15  6144        (Punch 3 times to verify)
       15  6144
       15  6144
       4   AERRS
       15  6144
       4   QERRS
       15  6144
       4   -2560
       15  6144
       1   +256
       7   NEXT
       8   ;-3

AOK    4   QSAVE       (A is correct, Check Q)
       2   QCHK
       7   ;+3
       10  QERRS
       8   BAD
       
NEXT   4   A           (Prepare next A = A * 2)
       1   A
       5   A
       4   QCHK        (Prepare next QCHK - 0, 1, 2, 4, ...))
       7   Q0
       1   QCHK
       5   QCHK
 NEWQ  9   ;+2         (Deal with overflow Q->A)
       8   NOFLO
       10  A           (Top bit of Q -> A)
       5   QFLAG       (Q stays 0 from now on)
       4   +0          (Q, QCHK := 0, 0)
       5   QCHK
       8   ;+2
NOFLO  1   Q           (Q = Q * 2)
       5   Q
       10  SHIFT       (Increment count, stop at 0)
       10  COUNT
       4   COUNT
       9   CYCLE
       8   PCTEST      (Restart test)

Q0     4   QFLAG       (First time QCHK is zero?)
       9   NEXT        (No, so stays zero)
       10  QCHK        (Yes, so QCHK := 1)
       4   Q           (And Q := Q * 2)
       8   NOFLO

A      >1              (Simulated AQ)
Q      >1
QSAVE  >1              (Result of 3 instruction = Q >> 1)
QCHK   >1              (Calculated result of 3 instruction)
QFLAG  >1              (0 if first time QCHK = 0no overflow yet from Q->A,
                        otherwise < 0)
COUNT  >1              (Counts up from -48 to -1)
AERRS  >1              (Count of A errors)
QERRS  >1              (Count of Q errors)

%
<! HALT !>